#!/bin/bash

# =========================
# Help function
# =========================
print_help() {
cat <<EOF
  Usage: $0 [OPTIONS]

  Required:
  --device=/path/to/device             Direct device test (e.g. --device=/dev/nvme0n1)
      - or -
  --work-file=/path/to/file            File based test (e.g. --work-file=./testfile)

  Optional:
  --report=/path/to/report             Path to the report file (default ./disks_test_report.txt)
  -h, --help                           Show this help

  Examples:
  $0 --device=/dev/nvme0n1 --report=report.txt
  $0 --work-file=./testfile
EOF
exit 0
}

# =========================
# Argument parsing
# =========================

DEVICE=""
WORK_FILE=""
REPORT_FILE="disks_test_report.txt"

for arg in "$@"; do
  case $arg in
    --device=*)
      DEVICE="${arg#*=}"
      ;;
    --work-file=*)
      WORK_FILE="${arg#*=}"
      ;;
    --report=*)
      REPORT_FILE="${arg#*=}"
      ;;
    -h|--help)
      print_help
      ;;
    *)
      echo "‚ùå Unknown argument: $arg"
      print_help
      ;;
  esac
done

# =========================
# Parameter validation
# =========================

if [[ -n "$DEVICE" && -n "$WORK_FILE" ]] || [[ -z "$DEVICE" && -z "$WORK_FILE" ]]; then
  echo "‚ùå You must provide exactly one argument: --device=... or --work-file=..."
  print_help
fi

# =========================
# Configuration and checks
# =========================

USE_DIRECT=false
FILENAME=""
if [[ -n "$DEVICE" ]]; then
  USE_DIRECT=true
  FILENAME="$DEVICE"
  if mount | grep -q "$DEVICE"; then
    echo "‚ùå Device $DEVICE is mounted. Unmount it before testing with --device."
    exit 1
  fi
else
  FILENAME="$WORK_FILE"
fi

# =========================
# System information
# =========================

DATE=$(date '+%Y-%m-%d %H:%M:%S')
CPU=$(lscpu | grep "Model name" | sed 's/Model name:\s*//')
RAM=$(free -h | awk '/^Mem:/ {print $2}')
BOARD=$(cat /sys/class/dmi/id/board_name 2>/dev/null || echo "Unknown board")
DISK_INFO=$(lsblk -d -o NAME,VENDOR,MODEL,SIZE,TRAN | grep "$(basename $FILENAME)" || echo "No data from lsblk")
SMART_INFO=$(smartctl -i "$FILENAME" 2>/dev/null)

echo "======================" | tee -a "$REPORT_FILE"
echo "üïí Test date: $DATE" | tee -a "$REPORT_FILE"
echo "üñ•Ô∏è CPU: $CPU" | tee -a "$REPORT_FILE"
echo "üíæ RAM: $RAM" | tee -a "$REPORT_FILE"
echo "üîß Motherboard: $BOARD" | tee -a "$REPORT_FILE"
echo "üìÄ Tested disk: $DISK_INFO" | tee -a "$REPORT_FILE"
echo "$SMART_INFO" | grep -E 'Model|Serial|Capacity|Interface' | tee -a "$REPORT_FILE"
echo "======================" | tee -a "$REPORT_FILE"
echo "" | tee -a "$REPORT_FILE"

FIO_FLAGS="--time_based --group_reporting --runtime=30 --size=2G --filename=$FILENAME"
[[ $USE_DIRECT == true ]] && FIO_FLAGS="$FIO_FLAGS --direct=1"

# =========================
# Test function
# =========================
run_test() {
  NAME=$1
  DESC=$2
  PARAMS=$3
  TMP_JSON=$(mktemp)

  echo "üîπ Test: $DESC" | tee -a "$REPORT_FILE"

  fio --name="$NAME" $FIO_FLAGS $PARAMS --output-format=json --output="$TMP_JSON"

  # Parsing the most important result
  RESULT=""
  if [[ "$NAME" == *"seq-read"* || "$NAME" == *"seq-write"* || "$NAME" == *"long-write"* ]]; then
    # Throughput (MiB/s)
    BW=$(jq 'if .jobs[0].write.bw_bytes == 0 then .jobs[0].read.bw_bytes else .jobs[0].write.bw_bytes end' "$TMP_JSON")
    MB=$(awk "BEGIN { printf \"%.2f\", $BW / 1048576 }")
    UNIT="MiB/s"
    RESULT="$MB $UNIT"
  elif [[ "$NAME" == *"randread"* || "$NAME" == *"randwrite"* ]]; then
    # IOPS
    IOPS=$(jq 'if .jobs[0].write.iops == 0 then .jobs[0].read.iops else .jobs[0].write.iops end' "$TMP_JSON")
    UNIT="IOPS"
    RESULT="$IOPS $UNIT"
  elif [[ "$NAME" == *"latency"* ]]; then
    # Average access time (¬µs)
    LAT=$(jq 'if .jobs[0].write.clat_ns.mean == 0 then .jobs[0].read.clat_ns.mean else .jobs[0].write.clat_ns.mean end' "$TMP_JSON")
    LAT_US=$(awk "BEGIN { printf \"%.2f\", $LAT / 1000 }")
    UNIT="us"
    RESULT="$LAT_US $UNIT"
  else
    RESULT="Unknown test type"
  fi

  echo "‚úÖ Result: $DESC ‚Üí $RESULT" | tee -a "$REPORT_FILE"
  echo "" | tee -a "$REPORT_FILE"

  rm "$TMP_JSON"
}

# =========================
# Running tests
# =========================

run_test "seq-read" "Sequential read 1M Q1T1" "--rw=read --bs=1M --iodepth=1 --numjobs=1"
run_test "seq-write" "Sequential write 1M Q1T1" "--rw=write --bs=1M --iodepth=1 --numjobs=1"
run_test "randread-q1t1" "Random read 4K Q1T1" "--rw=randread --bs=4k --iodepth=1 --numjobs=1"
run_test "randwrite-q1t1" "Random write 4K Q1T1" "--rw=randwrite --bs=4k --iodepth=1 --numjobs=1"
run_test "randread-q32t16" "Random read 4K Q32T16" "--rw=randread --bs=4k --iodepth=32 --numjobs=16"
run_test "randwrite-q32t16" "Random write 4K Q32T16" "--rw=randwrite --bs=4k --iodepth=32 --numjobs=16"
run_test "latency-q1t1" "Random read latency 4K Q1T1" "--rw=randread --bs=4k --iodepth=1 --numjobs=1"
run_test "long-write" "Throttling test - continuous write 60s" "--rw=write --bs=1M --iodepth=1 --numjobs=1 --runtime=60"

# =========================
# Cleanup
# =========================

[[ $USE_DIRECT == false && -f "$WORK_FILE" ]] && rm "$WORK_FILE"

